# UOMCS - Mesh Networking and Forwarding

## 1. Introduction

This document specifies the Network Layer (NL) protocols for UOMCS, focusing on an on-demand routing protocol based on AODV principles.

## 2. Network Layer Packet Structure

All NL PDUs share a common 68-byte header containing `NL_Packet_Type`, `Hop_Limit`, `Source_NodeID`, `Destination_NodeID`, and `NL_Payload_Length`, followed by the `NL_Payload`.

- **NL Packet Types:**
    - `0x01`: `UOMCS_DATA` (carries a Transport Layer PDU)
    - `0x02`: `UOMCS_RREQ` (Route Request)
    - `0x03`: `UOMCS_RREP` (Route Reply)
    - `0x04`: `UOMCS_RERR` (Route Error)
    - The `UOMCS_RREP_ACK` and `UOMCS_HELLO` message types are defined as **OPTIONAL** extensions. Implementations are not required to support them for Base Profile compliance. Nodes that do use HELLO messages **MUST** advertise this via the `CAP_HELLO_MESSAGES` flag (see `08-operational-considerations.md`).

## 3. UOMCS Routing Protocol

### 3.1. Route Discovery (`RREQ` and `RREP`)
- Route discovery is initiated via a broadcast `UOMCS_RREQ` when a route is needed. The `RREQ` establishes a reverse path to the source.
- Intermediate nodes receiving the `RREQ` check a cache to prevent storms, update the reverse path, and re-broadcast the `RREQ` if they are not the destination and have no valid route.
- The destination node (or an intermediate node with a fresh enough route) responds with a unicast `UOMCS_RREP` along the reverse path.
- As the `RREP` travels, it establishes the forward route to the destination in the routing tables of intermediate nodes.

### 3.2. Route Maintenance (`RERR`)
- When a link break is detected on an active route (e.g., via DLL failure), the upstream node broadcasts a `UOMCS_RERR` message.
- The `RERR` lists all destinations that are now unreachable. Nodes receiving an `RERR` **SHALL** invalidate the specified routes.

### 3.3. Routing Table
Each node **SHALL** maintain a routing table. Entries **SHOULD** contain: `Destination_NodeID`, `Next_Hop_NodeID`, `Next_Hop_Link_Addr`, `Destination_Sequence_Number`, `Route_State` (`VALID`, `INVALID`), `Hop_Count`, and `Lifetime_Expiry_Timestamp`. Route lifetimes **SHOULD** be refreshed upon active use.

## 4. Packet Forwarding and Queuing

- Nodes **SHALL** forward `UOMCS_DATA` packets not addressed to themselves if a valid route exists, decrementing the `Hop_Limit`.
- Nodes **SHOULD** implement a short-term store-and-forward queue for packets that cannot be immediately sent due to a missing route or temporary link unavailability. Queued packets **MUST** have a limited lifetime (e.g., 30-60 seconds).

## 5. Security of Routing Packets
Routing packets are not encrypted. To protect against malicious manipulation, a UOMCS security profile **MAY** require digital signatures on `RREP` and `RERR` packets, as discussed in `05-security.md`.